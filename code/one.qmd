# Library
```{r}
library(dplyr)
library(lubridate)
library(stringr)
library(readr)
#library(yahoofinancer)
library(ggplot2)
library(quantmod)
library(tidyquant)
library(purrr)
library(tidyverse)

PATH <- "/Users/jackson/Documents/finance/data/stocks/"
```

```{r}


```


# Function that saves stock data to CSV (yahoofinancer)
```{r}
save_to_csv_from_yahoo <- function(ticker, syear, smonth, sday, eyear, emonth, eday) {
  
  #Defines time period to use
  start <- as.Date(paste(syear, smonth, sday, sep = "-"))
  end <- as.Date(paste(eyear, emonth, eday, sep = "-"))
  
  #Reads data into dataframe
  stock <- Ticker$new(ticker)
  df <- stock$get_history(start = start, end = end, interval = '1d')
  
  df$adj_close <- unlist(df$adj_close)
  
  ticker <- as.character(ticker)
  
  Sys.sleep(2)

  #Saves data to csv
  write_csv(df, file = paste0("/Users/jackson/Documents/finance/data/stocks/", ticker, ".csv"))
  
  return(df)

}

```

# Function that saves stock data to CSV (tidyquant)
```{r}
save_to_csv_from_yahoo <- function(ticker, syear, smonth, sday, eyear, emonth, eday) {
  
  #Defines time period to use
  start <- as.Date(paste(syear, smonth, sday, sep = "-"))
  end <- as.Date(paste(eyear, emonth, eday, sep = "-"))
  
  #Reads data into dataframe
  df <- tq_get(ticker, get = "stock.prices", from = start, to = end)
  
  ticker <- as.character(ticker)

  #Saves data to csv
  write_csv(df, file = paste0("/Users/jackson/Documents/finance/data/stocks/", ticker, ".csv"))
  
  return(df)

}

```


# Function that Returns a Dataframe from a CSV
```{r}
get_df_from_csv <- function(path) {
  
  tryCatch({
    df <- read_csv(path)
  }, error = function(e) {
    print("File Doesn't Exist")
    df <- NULL
  })
  
  return(df)
}


```

# Get Column from a CSV
```{r}
get_column_from_csv <- function(file, col_name) {
 
  tryCatch({
    df <- read_csv(file)
    column <- df[[col_name]]
    return(column)
  }, error = function(e) {
    print("File Doesn't Exist")
  })
}
```

# Get tickers
```{r}
tickers <- get_column_from_csv("/Users/jackson/Documents/finance/data/Wilshire-5000-Stocks-New.csv", "Ticker")

```

# Download all stock data:
```{r}
tickers |>
  map(possibly(\(ticker) save_to_csv_from_yahoo(ticker, 2015, 1, 1, 2024, 1, 1), NULL))
```

#Read in stock data
```{r}
paths <- list.files("/Users/jackson/Documents/finance/data/stocks/", pattern = "[.]csv$", full.names = T)
?list.files

stock_data <- paths |>
  set_names(basename) |>
  map(readr::read_csv)
length(stock_data)
View(stock_data_returns)

"/Users/jackson/Documents/finance/data/stocks/AAPL.csv" |>
  set_names(basename) |>
  map(get_df_from_csv) |>
  list_rbind()


```


# Add Daily Return and Cumulative return to Dataframe
```{r}
# We calculate a percentage rate of return for each day to compare investments.
# Simple Rate of Return = (End Price - Beginning Price) / Beginning Price OR (EP / BP) - 1

# Shift provides the value from the previous day
# NaN is displayed because there was no previous day price for the 1st calculation

add_returns <- function(df) {
  
  #Lag is value from previous day
  df <- df |>
    mutate(daily_return = (adjusted / lag(adjusted)) - 1,
           daily_return = ifelse(is.na(daily_return), 0, daily_return),
           cumulative_return = cumprod(1 + daily_return) - 1)
           

  #Save data to a csv
  #write_csv(df, file = paste0("/Users/jackson/Documents/finance/data/stocks/", ticker, ".csv"))
  
  return(df)
}

add_returns(stock_data)

stock_data[[2000]] |>
  mutate(daily_return = (adjusted / lag(adjusted)) - 1,
         #daily_return = ifelse(is.na(daily_return), 0, daily_return),
           cumulative_return = cumprod(1 + daily_return) - 1
        )
           
View(stock_data)
?cumprod()

stock_data_returns <- map(stock_data, add_returns)

stock_data_returns[[5]]
```

# Change names of DF to ticker name
```{r}

stock_data_tickers <- stock_data_returns |> map(pluck, "symbol")

for (x in seq_along(stock_data_returns)) {
  # Get the ticker symbol from the first column of the corresponding tibble
  ticker <- pluck(stock_data_tickers[[x]])[1]
  
  # Rename the tibble in stock_data_returns using the ticker symbol
  names(stock_data_returns)[x] <- ticker
}

stock_data_returns <- lapply(stock_data_returns, function(df) {
  if (!is.null(df)) {
    mutate(df, symbol = as.character(symbol))
  } else {
    NULL
  }
})

stock_data_test <- map(names(stock_data_returns), ~ str_remove(., "\\.csv"))


```

# Merge by Column
```{r}

# ---------------------------------------------- NONE OF THIS WORKED -------------
S_DATE <- "2024-01-01"
E_DATE <- "2023-01-01"

merge_columns_close <- function(stocks){
 mult_df <- stock_data_returns[[1]] |>
   select(date, close)
  
  for (stock in stocks) {
  df <- stock_data_returns[[stock]] |>
    select(date, close)
  
  suffix <- paste0("_", stock)
  
  merged <- left_join(mult_df, df, by = "date", suffix = c("", suffix))
  
  }
  return(merged)
}

merge_columns_close(stock_data_returns)

mult_df <- stock_data_returns[[1]]

merge_columns("close", S_DATE, E_DATE, test_stocks)

test_stocks <- c("AAPL", "AMZN", "TSLA", "GOOG")

View(stock_data_returns)

matrix(c(cov(portfolio)), nrow = 4, ncol = 4)

AAPL <- stock_data_returns[["AAPL"]] |> select(date, cumulative_return)
AMZN <- stock_data_returns[["AMZN"]] |> select(date, cumulative_return)

cumulative_returns <- lapply(stock_data_returns, function(df) {
  df[["cumulative_return"]]  # Assuming the column name is "cumulative_return"
})

str(cumulative_returns[["AAPL"]])

# Step 2: Rename each cumulative return column with its corresponding ticker symbol
tickers <- names(stock_data_returns)
names(cumulative_returns) <- tickers


stock_data_returns_filtered <- map(stock_data_returns, ~
  filter(.x, date >= S_DATE & date <= E_DATE))


close_data <- map(stock_data_returns, ~ select(.x, date, close)) 

for (stock in stock_data_returns){
  if (stock == 1){
    df <- stock_data_returns[[1]]
  } else {
    df <- left_join(df, stock, by = "date")
  }
  
  return(df)
}

bind_cols(close_data, )
?bind_cols
head(close_data)

str(stock_data_returns)

test <- lapply(stock_data_returns, "[[", "close")

  
```

#Correlation
```{r}
# ------------ THIS WORKED -----------------

portfolio <- data.frame(stock_data_returns[test_stocks]) |>
  select(ends_with("close"))

returns <- portfolio |>
  mutate_at(vars(ends_with(".close")), ~ round((log(. / lag(.))), 6))

cor(returns, use = "complete.obs")
```

# Industry stocks
```{r}
sec_df <- read_csv("/Users/jackson/Documents/finance/data/big_stock_sectors.csv")

indus_df <- sec_df |> filter(Sector == "Industrial")
health_df <- sec_df |> filter(Sector == "Healthcare")
it_df <- sec_df |> filter(Sector == "Information Technology")
comm_df <- sec_df |> filter(Sector == "Communications")
staples_df <- sec_df |> filter(Sector == "Staples")
discr_df <- sec_df |> filter(Sector == "Discretionary")
util_df <- sec_df |> filter(Sector == "Utilities")
fin_df <- sec_df |> filter(Sector == "Financial")
restate_df <- sec_df |> filter(Sector == "Real Estate")
energy_df <- sec_df |> filter(Sector == "Energy")
```


# Download all industry stock data:
```{r}
tickers_indus <- get_column_from_csv("/Users/jackson/Documents/finance/data/big_stock_sectors.csv", "Ticker")

tickers_indus |>
  map(possibly(\(ticker) save_to_csv_from_yahoo(ticker, 2015, 1, 1, 2024, 1, 1), NULL))
```

# Top Cumulative Returns by Industry
```{r}

indus_df <- it_df |>
    select(Ticker) |>
    pull(Ticker)
  
  indus_data <- stock_data_returns[indus_df]
  
  indus_data <- lapply(indus_data, function(df) {
  if (!is.null(df)) {
    mutate(df, symbol = as.character(symbol))
  } else {
    NULL
  }
})
  combined_indus_data <- reduce(indus_data, bind_rows)
  
  combined_indus_data |>
  group_by(symbol) |>
  summarize(cum_ret = last(cumulative_return, na.rm = T)) |>
  arrange(desc(cum_ret)) |> head(10)

indus_top_returns <- function(df) {
  
  indus_df <- df |>
    select(Ticker) |>
    pull(Ticker)
  
  indus_data <- stock_data_returns[indus_df]
  combined_indus_data <- reduce(indus_data, bind_rows)
  
  combined_indus_data |>
  group_by(symbol) |>
  summarize(cum_ret = last(cumulative_return, na.rm = T)) |>
  arrange(desc(cum_ret)) |> head(10)
  
}

industrial <- indus_top_returns(indus_df)
it <- indus_top_returns(it_df)
health <- indus_top_returns(health_df)
communications <- indus_top_returns(comm_df)
staples <- indus_top_returns(staples_df)
discretionary <- indus_top_returns(discr_df)
utilities <- indus_top_returns(util_df)
financial <- indus_top_returns(fin_df)
real_estate <- indus_top_returns(restate_df)
energy <- indus_top_returns(energy_df)


```


# Ichimoku indicators:
```{r}
get_ichimoku <- function(df) {
  # Lagging Span (Chikou)
  df <- df %>%
    mutate(chikou_span = lag(close, 26))
  
  # Base Line (Kijun-sen)
  df <- df %>%
    mutate(kijun_sen = (max(high, order_by = date, na.rm = TRUE) + min(low, order_by = date, na.rm = TRUE)) / 2)
  
  # Conversion Line (Tenkan-sen)
  df <- df %>%
    mutate(tenkan_sen = (max(high, order_by = date, na.rm = TRUE) + min(low, order_by = date, na.rm = TRUE)) / 2)
  
  # Leading Span A (Senkou A)
  df <- df %>%
    mutate(senkou_span_a = ((tenkan_sen + kijun_sen) / 2) %>% lag(26))
  
  # Leading Span B (Senkou B)
  df <- df %>%
    mutate(senkou_span_b = (((max(high, order_by = date, na.rm = TRUE) + min(low, order_by = date, na.rm = TRUE)) / 2) %>% lag(52)))
  
  # Cloud (Kumo)
  df <- df %>%
    mutate(kumo = senkou_span_a - senkou_span_b)
  
  return(df)
}

get_ichimoku(stock_data[[5]])
```


# Returns Total Return Over Time
```{r}
get_return_defined_time <- function(df, syear, smonth, sday, eyear, emonth, eday) {
  
  #create string expression for dates
  start <- as.Date(paste(syear, smonth, sday, sep = "-"))
  end <- as.Date(paste(eyear, emonth, eday, sep = "-"))
  
  df <- df |>
    filter(date >= start & date <= end) |>
    mutate(
      date = as.Date(date),
      daily_ret = mean(daily_return),
          )
  
  # Get the number of days between the two dates
  days <- nrow(df)
  
  return(days * daily_ret)

}


```

 # Whole workflow
```{r}
get_returns <- function(ticker, syear, smonth, sday, eyear, emonth, eday) {
  
  #Defines time period to use
  start <- as.Date(paste(syear, smonth, sday, sep = "-"))
  end <- as.Date(paste(eyear, emonth, eday, sep = "-"))
  
  #Reads data into dataframe
  df <- tq_get(ticker, get = "stock.prices", from = start, to = end) |>
    mutate(
      
      #Add daily return to df
      daily_return = (adjusted / lag(adjusted)) - 1,
      
      #Get total return over period (days * avg daily return)
      tot_return = n() * mean(daily_return, na.rm = T)
           )
  
  ticker <- as.character(ticker)

  #Saves data to csv
  write_csv(df, file = paste0("/Users/jackson/Documents/finance/data/stocks/", ticker, ".csv"))
  
  return(df)

}
```

# Finance Plot
```{r}
price_plot <- function(ticker, chart_type, syear, smonth, sday, eyear, emonth, eday) {
  
  start <- as.Date(paste(syear, smonth, sday, sep = "-"))
  end <- as.Date(paste(eyear, emonth, eday, sep = "-"))
  
  ticker <- as.character(ticker)
  
  tryCatch({
    df_sub <- read_csv(paste0("/Users/jackson/Documents/finance/data/stocks/", ticker, ".csv")) |>
      filter(date >= start & date <= end)
  }, error = function(e) {
    print("File Doesn't Exist")
    return(NULL)
  })
  
  if (chart_type == "line"){
  
    return(
  df_sub |>
    ggplot(aes(x = date, y = adjusted)) +
    geom_line() +
    labs(title = "AAPL Line Chart", y = "Closing Price", x = "") + 
    theme_minimal()
          )
  } else if (chart_type == "candlestick") {
    
    return(
    df_sub |>
    ggplot(aes(x = date, y = adjusted)) +
    geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
    labs(title = "AAPL Candlestick Chart", y = "Closing Price", x = "") +
    theme_minimal()
          )
    }
  
  
}
```


## Test functions
```{r}
#one
ticker <- "aapl"
stock <- Ticker$new(ticker)
df <- stock$get_history(start = "2022-08-15", end = "2023-01-15", interval = '1d')
df
df$adj_close <- unlist(df$adj_close)



save_to_csv_from_yahoo("aapl", 2022, 08, 15, 2022, 12, 30)

#two
AAPL <- get_df_from_csv('aapl')

#three
add_daily_return_to_df(AAPL, 'AAPL') # Have to rerun step two after step three to get the updated CSV data

 df_daily_return <- df |>
    mutate(daily_return = (adj_close / lag(adj_close)) - 1)

#four
get_return_defined_time(AAPL, 2022, 08, 15, 2022, 12, 30)

#whole workflow
get_returns('aapl', 2022, 08, 15, 2022, 12, 30)

#price plot
price_plot('aapl', 'line', 2022, 08, 15, 2022, 12, 30)

#quantmod

getSymbols("^GSPC", src = "yahoo", from = Sys.Date() - 365, to = Sys.Date())
View(F)

GSPC$GSPC.Ret <- diff(GSPC$GSPC.Adjusted)/lag(GSPC$GSPC.Adjusted)
View(GSPC)

plot(F$F.Ret)

lm_capm <- lm(F$F.Ret ~ GSPC$GSPC.Ret)
summary(lm_capm)

#Bind rows?
list_rbind(stock_data)

```

